Dot {
 name Comma
 help "Comma v1.2 by Adrian Pueyo\n\nIntelligent Dot that connects itself when needed, displays cool information and colours about what itâ€™s connected to, lets you have a quick access to the nodes you want, customise its appearance and save it as a preset.\n\n7 July 2018\nadrianpueyo.com, 2016-2018"
 onCreate "if nuke.GUI:\n    comma101Reload = True\n    try:\n        nuke.thisNode().knob(\"toReconnect\").setValue(1)\n    except:\n        pass"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\nkn = k.name()\nif((kn not in \[\"xpos\",\"ypos\",\"selected\",\"label\",\"hidePanel\",\"showPanel\"] or n.knob(\"toReconnect\").value()) and nuke.GUI):\n    try:\n        comma101Reload\n    except:\n        pass\n    else:\n        # 1A: Load QC\n        import string\n        def commaLoadQC():\n            comma_cams_list = \[]\n            for cam in nuke.allNodes(\"Camera2\"):\n                comma_cams_list.append(cam.name())\n            r = nuke.Root()\n            comma_r_qc = r.knob(\"commaQC\")\n            comma_r_qc_list = \[]\n            comma_qc_list = \['----------------']\n            if comma_r_qc:\n                try:\n                    comma_r_qc_list = comma_r_qc.value().replace(\" \",\"\").split(\",\")\n                except:\n                    print (\"Error retrieving QuickConnect nodes\")\n                    pass\n                if n\[\"displayCams\"].getValue()==1:\n                    comma_qc_list = list(\['----------------']+list(set(comma_r_qc_list+comma_cams_list)))\n                else:\n                    comma_qc_list = list(\['----------------']+comma_r_qc_list)\n                    n\[\"commaQuickConnect\"].setValue(0)\n                    \n            elif n\[\"displayCams\"].getValue()==1:\n                comma_qc_list = list(\['----------------']+comma_cams_list)\n            n\[\"commaQuickConnect\"].setValues(comma_qc_list)\n            if n.inputs():\n                if n.input(0).name() in comma_qc_list:\n                    n\[\"commaQuickConnect\"].setValue(n.input(0).name())\n                else:\n                    n\[\"commaQuickConnect\"].setValue(0)\n            else:\n                n\[\"commaQuickConnect\"].setValue(0)\n                \n        commaStatusList = \[' ','\\n<i style=\"color:yellow\">Not connected</i>','\\n<i style=\"color:lime\">Connected</i>','\\n<i style=\"color:red\">Unable to connect</i>',' ']\n        \n        # 1B: Make label\n        def commaResetLabel(labelErrorStatus=0):\n            if labelErrorStatus:\n                commaLabelResult = '<img src=\"Comma.png\">\\n<span style=\"color:#CCC\"><big>'+n\[\"input_node\"].value()+'</big></span>'\n            else:\n                commaLabelResult = '<img src=\"Comma.png\">\\n<span style=\"color:#CCC\"><big>Comma</big></span>'\n            commaLabelExtra = n\[\"post_label\"].value()\n            if commaLabelExtra != \"\":\n                commaLabelResult += '\\n' if n\[\"extra_new_line\"].getValue() else \" \"\n                commaLabelResult += commaLabelExtra\n            if labelErrorStatus:\n                commaLabelResult += commaStatusList\[3]\n            n\[\"label\"].setValue(commaLabelResult)\n            n\[\"tile_color\"].setValue(4294967295)\n            \n        def commaMakeLabel (labelErrorStatus = 0):\n            try:\n                commaInputName = n\[\"input_node\"].value()\n                commaInputNode = nuke.toNode(commaInputName)\n                commaLabelResult = \"\"\n                # icon?\n                if n\[\"label_icon\"].getValue():\n                    if (commaInputName != \"\"):\n                        commaLabelResult += '<img src=\"' + commaInputNode.Class().rstrip(string.digits)+'.png\">'\n                    else:\n                        commaLabelResult += '<img src=\"Comma.png\"'\n                    # Icon new line\n                    if n\[\"icon_new_line\"].getValue():\n                        commaLabelResult += '\\n'\n                    else:\n                        commaLabelResult += ' '\n                # Labels main part\n                commaLabelMain = \"\"\n                if (n\[\"label_text\"].getValue() == 0):\n                    commaLabelMain += commaInputName\n                elif (n\[\"label_text\"].getValue() == 1):\n                    commaLabelMain += commaInputNode\[\"label\"].value()+\" \"\n                # Label main color\n                commaLabelResultClr = \"FFFFFF\"\n                commaDotResultClr = 0\n                commaLabelCMode = n\[\"label_color\"].getValue()\n                # Calculate dot color\n                commaLabelMainClr = commaInputNode\['tile_color'].value()\n                if commaLabelMainClr == 0:\n                    commaLabelMainClr = str(nuke.defaultNodeColor(commaInputNode.Class()))\n                commaDotResultClr = commaLabelMainClr\n                if (commaLabelCMode==0):\n                    commaLabelResultClr = hex(int(commaLabelMainClr))\[2:].zfill(8)\[:-2]\n                elif (commaLabelCMode==1):\n                    commaLabelMainClr = commaInputNode.knob('note_font_color').value()\n                    commaLabelResultClr = hex(int(commaLabelMainClr))\[2:].zfill(8)\[:-2]\n                elif (commaLabelCMode==2):\n                    commaLabelResultClr = \"FFFFFF\"\n                elif (commaLabelCMode==3):\n                    commaLabelResultClr = \"000000\"\n                else:\n                    commaLabelResultClr = \"Nope\"\n                if commaLabelResultClr==0:\n                    commaLabelResultClr = \"FFFFFF\"\n                if commaLabelResultClr == \"Nope\":\n                    commaLabelMain = '<span><big>'+commaLabelMain+'</big></span>'\n                else:\n                    commaLabelMain = '<span style = \"color:#'+commaLabelResultClr+'\"><big>'+commaLabelMain+'</big></span>'\n                commaLabelResult += commaLabelMain\n                commaLabelExtra = n\[\"post_label\"].value()\n                if commaLabelExtra != \"\":\n                    commaLabelResult += '\\n' if n\[\"extra_new_line\"].getValue() else \" \"\n                    commaLabelResult += commaLabelExtra\n                if labelErrorStatus:\n                    commaLabelResult += commaStatusList\[3]\n                n\[\"label\"].setValue(commaLabelResult)\n                if n\[\"colorize_dot\"].value():\n                    n\[\"tile_color\"].setValue(int(commaDotResultClr))\n                elif kn == \"colorize_dot\":\n                    n\['tile_color'].setValue(0)\n            except:\n                commaResetLabel(1)\n        del comma101Reload\n\n    # Do the stuff\n    commaInputStatus = 0 # Default unchanged\n    # A: QuickConnect changed?\n    if kn == \"commaQuickConnect\":\n        if k.getValue()!=0:\n            if not nuke.exists(k.value()):\n                if nuke.ask(\"Couldn't find the node \"+k.value()+\".\\nWould you like to removeit from the QuickConnect list?\"):\n                    try:\n                        comma_r_qc = nuke.Root().knob(\"commaQC\")\n                        comma_r_qc_list = comma_r_qc.value().replace(\" \",\"\").split(\",\")\n                        comma_r_qc_list.remove(k.value())\n                        comma_r_qc.setValue(\",\".join(comma_r_qc_list))\n                        k.setValue(0)\n                    except:\n                        print (\"Unable to remove node from QuickConnect list.\")\n            else:\n                try:\n                    n.setInput(0,nuke.toNode(k.value()))\n                    n\[\"input_node\"].setValue(k.value())\n                    commaInputStatus = 2\n                except:\n                    nuke.message(\"Unable to connect to \"+k.value())\n                    commaInputStatus = 3\n        commaLoadQC()\n        \n    # B: input name field changed?\n    elif kn == \"input_node\":\n        try:\n            if nuke.exists(k.value()):\n                n.setInput(0,nuke.toNode(k.value()))\n                commaInputStatus = 2\n            else:\n                n.setInput(0,None)\n                if n\[\"input_node\"].value() not in \[\"\",\" \"]:\n                    commaInputStatus = 3\n        except:\n            commaInputStatus = 4 if k.value() else 3\n        commaLoadQC()\n    \n    # C: Input changed manually?\n    elif kn == \"inputChange\":\n        if n.inputs():\n            n\[\"input_node\"].setValue(n.input(0).name())\n            commaInputStatus = 2\n        else:\n            n\[\"input_node\"].setValue(\"\")\n            commaInputStatus = 4\n        commaLoadQC()\n    \n    # D: toReconnect is true?\n    elif n\[\"toReconnect\"].getValue():\n        n\[\"toReconnect\"].setValue(0)\n        try:\n            if n.inputs():\n                n\[\"input_node\"].setValue(n.input(0).name())\n                commaInputStatus = 2 if n\[\"input_node\"].value() not in \[\"\",\" \"] else 0\n            else:\n                n.setInput(0, nuke.toNode(n\[\"input_node\"].value()))\n                if not n\[\"isPreset\"].getValue():\n                    if n.inputs():\n                        commaInputStatus = 3 if n\[\"input_node\"].value() in \[\"\",\" \"] else 0\n        except:\n            commaInputStatus = 3 if n\[\"input_node\"].value() not in \[\"\",\" \"] else 0\n        commaLoadQC()\n        \n    # E: Changed the displayCams checkbox?\n    elif kn == \"displayCams\":\n        commaLoadQC()\n    \n    # F: HideInput\n    elif kn == \"hide_input\":\n        n\[\"hideInput\"].setValue(k.value())\n    elif kn == \"hideInput\":\n        n\[\"hide_input\"].setValue(k.value())\n    \n    ### Change or reset the status\n    if commaInputStatus != 0 or n\[\"input_node\"].value() in \[\"\",\" \"]:\n        n\[\"input_status\"].setValue(commaStatusList\[commaInputStatus])\n    # and label...\n    if commaInputStatus != 3:\n        if n\[\"input_node\"].value() not in \[\"\",\" \"]:\n            commaMakeLabel()\n        else:\n            commaResetLabel()\n    else:\n        commaResetLabel(1)"
 tile_color 0xffffffff
 label "<img src=\"Comma.png\">\n<span style=\"color:#CCC\"><big>Comma</big></span>"
 selected true
 xpos 264
 ypos -3
 hide_input true
 addUserKnob {20 Comma}
 addUserKnob {6 isComma -STARTLINE +INVISIBLE}
 addUserKnob {6 isPreset +INVISIBLE +STARTLINE}
 addUserKnob {6 toReconnect l INVISIBLE -STARTLINE +INVISIBLE}
 addUserKnob {1 input_node l <b>Input:</b> t "Name of the input node. Updates automatically when changing the input, or you can change it manually."}
 addUserKnob {26 input_status l " " -STARTLINE T " "}
 addUserKnob {22 open_input l open t "Open the properties panel of the input node." T "n = nuke.thisNode()\ntry:\n    nuke.show(nuke.toNode(n\[\"input_node\"].value()))\nexcept:\n    pass" +STARTLINE}
 addUserKnob {22 zoom_input l zoom t "Center the input node on the Node Graph." -STARTLINE T "n = nuke.thisNode()\ntry:\n    ni = nuke.toNode(n\[\"input_node\"].value())\n    nuke.zoom(nuke.zoom(),(ni\[\"xpos\"].value(),ni\[\"ypos\"].value())) \nexcept:\n    nuke.message(\"Unable to zoom.\")\n"}
 addUserKnob {22 zoom_back l return t "Center this Comma on the Node Graph." -STARTLINE T "n = nuke.thisNode()\ntry:\n    nuke.zoom(nuke.zoom(),(n\[\"xpos\"].value(),n\[\"ypos\"].value()))\nexcept:\n    pass"}
 addUserKnob {26 ""}
 addUserKnob {4 commaQuickConnect l QuickConnect t "List of your custom QuickConnect nodes, plus all the Cameras on the script if \"display cameras\" is enabled.\nThe list gets stored on the Root knob of the current script." M {----------------}}
 addUserKnob {6 displayCams l "display cameras" t "Add all the Cameras in the current script to the QuickConnect pulldown." -STARTLINE}
 displayCams true
 addUserKnob {22 commaReloadQC l reload t "Reload the QuickConnect list and the Comma." T "n = nuke.thisNode()\ndef commaReloadQC():\n    comma_cams_list = \[]\n    for cam in nuke.allNodes(\"Camera2\"):\n        comma_cams_list.append(cam.name())\n    r = nuke.Root()\n    comma_r_qc = r.knob(\"commaQC\")\n    comma_r_qc_list = \[]\n    comma_qc_list = \['----------------']\n    if comma_r_qc:\n        try:\n            comma_r_qc_list = comma_r_qc.value().replace(\" \",\"\").split(\",\")\n        except:\n            print (\"Error retrieving QuickConnect nodes\")\n            pass\n        if n\[\"displayCams\"].getValue()==1:\n            comma_qc_list = list(\['----------------']+list(set(comma_r_qc_list+comma_cams_list)))\n        else:\n            comma_qc_list = list(\['----------------']+comma_r_qc_list)\n            n\[\"commaQuickConnect\"].setValue(0)\n            \n    elif n\[\"displayCams\"].getValue()==1:\n        comma_qc_list = list(\['----------------']+comma_cams_list)\n    n\[\"commaQuickConnect\"].setValues(comma_qc_list)\n    if n.inputs():\n        if n.input(0).name() in comma_qc_list:\n            n\[\"commaQuickConnect\"].setValue(n.input(0).name())\n        else:\n            n\[\"commaQuickConnect\"].setValue(0)\n    else:\n        n\[\"commaQuickConnect\"].setValue(0)\n        if n\[\"input_node\"].value() not in \[\"\",\" \"]:\n            try:\n                n.setInput(0,nuke.toNode(n\[\"input_node\"].value()))\n            except:\n                pass\ncommaReloadQC()" +STARTLINE}
 addUserKnob {22 commaAddQC l add t "Add current input node to the QuickConnect list, for easy access from now on." -STARTLINE T "n=nuke.thisNode()\ndef commaAddQCnode():\n    r = nuke.Root()\n    comma_r_qc = r.knob(\"commaQC\")\n    comma_r_qc_list = \[]\n    if not comma_r_qc:\n        comma_r_qcTab = nuke.Tab_Knob('Comma','Comma')\n        comma_r_qc = nuke.String_Knob(\"commaQC\",\"Comma QuickConnect\",\"\")\n        r.addKnob(comma_r_qcTab)\n        r.addKnob(comma_r_qc)\n    else:\n        try:\n            comma_r_qc_list = comma_r_qc.value().replace(\" \",\"\").split(\",\")\n            print (\"Saved QuickConnect nodes: \"+str(\"comma_r_qc_list\"))\n        except:\n            print (\"Error retrieving QuickConnect nodes\")\n    if n.inputs():\n        if n.input(0).name() not in comma_r_qc_list:\n            comma_r_qc_list.append(n.input(0).name())\n        if comma_r_qc.value() != \"\":\n            comma_r_qc.setValue(\",\".join(comma_r_qc_list))\n        else:\n            comma_r_qc.setValue(n.input(0).name())\nif n.inputs():\n    commaAddQCnode()\n    n\[\"commaQuickConnect\"].setValue(0)\n    n\[\"commaReloadQC\"].execute()"}
 addUserKnob {22 commaRemoveQC l remove t "Remove the current input node from the QuickConnect list." -STARTLINE T "n=nuke.thisNode()\ndef commaRemoveQCnode():\n    r = nuke.Root()\n    comma_r_qc = r.knob(\"commaQC\")\n    comma_r_qc_list = \[]\n    if not comma_r_qc:\n        print (\"Nothing to remove\")\n    else:\n        try:\n            comma_r_qc_list = comma_r_qc.value().replace(\" \",\"\").split(\",\")\n            print (\"Saved QuickConnect nodes: \"+str(\"comma_r_qc_list\"))\n        except:\n            print (\"Error retrieving QuickConnect nodes\")\n        if n\[\"input_node\"].value() in comma_r_qc_list:\n            comma_r_qc_list.remove(n\[\"input_node\"].value())\n        if comma_r_qc.value() != \"\":\n            comma_r_qc.setValue(\",\".join(comma_r_qc_list))\n        else:\n            comma_r_qc.setValue(\"\")\nif n.inputs():\n    commaRemoveQCnode()\n    n\[\"commaQuickConnect\"].setValue(0)\n    n\[\"commaReloadQC\"].execute()"}
 addUserKnob {26 ""}
 addUserKnob {4 label_text l label t "input node= name of input\ninput label= label of input" M {"input node" "input label" none "" "" "" "" ""}}
 addUserKnob {4 label_color l color t "Set the Comma's main label color to..." -STARTLINE M {"input node" "input label" white black none "" "" "" ""}}
 label_color white
 addUserKnob {6 icon_new_line l "new line" -STARTLINE}
 icon_new_line true
 addUserKnob {1 post_label l extra t "Secondary label to add below the main one.\n\nTip: try adding tcl or css."}
 addUserKnob {41 note_font_color_1 l "base color" -STARTLINE T note_font_color}
 addUserKnob {6 extra_new_line l "new line" -STARTLINE}
 extra_new_line true
 addUserKnob {41 note_font_1 l font T note_font}
 addUserKnob {41 note_font_size_1 l "" -STARTLINE T note_font_size}
 addUserKnob {6 label_icon l icon t "Display the icon of the input, on this Comma's label." +STARTLINE}
 label_icon true
 addUserKnob {6 colorize_dot l "colorize dot" t "Make the Dot color the same as the input node." -STARTLINE}
 colorize_dot true
 addUserKnob {6 hideInput l "hide input" -STARTLINE}
 hideInput true
 addUserKnob {1 pre_label l INVISIBLE +INVISIBLE}
 addUserKnob {26 ""}
 addUserKnob {22 commaSetDefault l "Save Preset" t "Save the current state of this Comma, including if it has an input, as the default for new Commas you create.\nNote: Presets will only work on machines with comma.py installed." T "import os\ndotNukeDir = os.path.normpath(os.path.expanduser('~/.nuke'))\nn = nuke.thisNode()\nn\[\"isPreset\"].setValue(1)\ncomma_orig_selection = nuke.selectedNodes()\n\[ns.setSelected(False) for ns in comma_orig_selection]\nn.setSelected(True)\ntry:\n    nuke.nodeCopy(dotNukeDir+\"/commaDefault.nk\")\n    nuke.message(\"Comma default saved.\")\nexcept:\n    nuke.message(\"Error saving Comma default. Please check your .nuke folder is writable.\")\nn.setSelected(False)\n\[ns.setSelected(True) for ns in comma_orig_selection]" +STARTLINE}
 addUserKnob {22 commaResetDefault l "Clear Preset" t "Clear the preset of this Comma, and return to its default state for new Commas you create.\nNote: Presets will only work on machines with Comma.py installed." -STARTLINE T "import os\ndotNukeDir = os.path.normpath(os.path.expanduser('~/.nuke'))\ntry:\n    os.remove(dotNukeDir+\"/commaDefault.nk\")\n    nuke.message(\"Comma reset successful.\")\nexcept:\n    pass"}
 addUserKnob {22 commaToDot l Commaâ†’Dot t "Turn this Comma into a Dot without the smart features, while preserving the label and style. Use this to debug or reduce space." -STARTLINE T "import nuke\nn = nuke.thisNode()\ndef commaToDot():\n    n.setSelected(True)\n    c = nuke.createNode(\"Dot\")\n    c.setXpos(n.xpos())\n    c.setYpos(n.ypos())\n    c\[\"label\"].setValue(n\[\"label\"].value())\n    c\[\"note_font\"].setValue(n\[\"note_font\"].value())\n    c\[\"note_font_size\"].setValue(n\[\"note_font_size\"].value())\n    c\[\"note_font_color\"].setValue(n\[\"note_font_color\"].value())\n    c\[\"tile_color\"].setValue(n\[\"tile_color\"].value())\n    c\[\"hide_input\"].setValue(n\[\"hide_input\"].value())\n    c.setSelected(False)\n    nuke.delete(n)\nif nuke.ask(\"Are you sure you want to kill this Comma?\"):\n    commaToDot()"}
 addUserKnob {26 version_author l "" t "Comma v1.1\n7 July, 2018" +STARTLINE T "<span style=\"color:#666\"><br/><b><a href=\"http://www.adrianpueyo.com/ap_tools/comma/Comma_v1.0_User_Guide.pdf\" style=\"color:#666;text-decoration: none;\">Comma v1.1</a></b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2018.</span>"}
}
